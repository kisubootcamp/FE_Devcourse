/*

  메모이제이션
  중복 계산을 피하기 위해 계산 결과를 저장해두고, 동일한 입력 값에 대해서는 이미 계산된 결과를 재사용하는 방법
  React.memo() -> 고차함수(컴포넌트를 반환하는 함수)

  useCallback()
  useMemo()

  컴포넌트
  랜더링과 리렌더링
  랜더링은 최소 1번 생성되는 것
  리렌더링은 이미 생성된 컴포넌트가 다시 생성되는 것

  리렌더링 조건
  1. 컴포넌트에 정의된 상태가 변경되었을 때
  2. 컴포넌트에 전달된 props 객체가 변경되었을 때

  리액트는 컴포넌트가 리렌더링 되면 그 컴포넌트의 하위 컴포넌트는 함께 리렌더링 됨
  -> 불필요한 리렌더링이 발생

  React.memo()
  memo() -> 컴포넌트를 반환하는 고차함수(high-order function)
  '컴포넌트'를 메모이제이션 할 때 사용
  하위 컴포넌트 중 제일 상위의 컴포넌트에 memo를 적용하면 그 컴포넌트 아래의 컴포넌트도 리렌더링 되지 않음

  메모이제이션 낭비
  -> 메모이제이션 효과를 보지 못하는데도 메이모제이션을 한 것

  useCallback -> '함수'를 메모이제이션할 때 사용
  함수를 메모이제이션 하는 이유 -> 하위 컴포넌트에서 메모이제이션이 풀리는 상황을 방지하려고

  useMemo(() => 값, [])
  리턴하는 '값'을 메모이제이션
  useMemo로 함수를 메모이제이션 할 수는 있지만 함수를 메모이제이션 할 수 있는 useCallback이 있기 때문에 사용하지는 않음
  useCallback은 값을 메모이제이션 하지 않음

  반복렌더링을 하는 부분(ex. 게시판의 게시물 더보기)에는 무조건 메모이제이션 하는게 나음
*/
